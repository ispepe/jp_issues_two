// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:bin_jiang_yi_hao/models/page_entity.dart';
import 'package:bin_jiang_yi_hao/generated/json/page_entity_helper.dart';
import 'package:bin_jiang_yi_hao/models/side_entity.dart';
import 'package:bin_jiang_yi_hao/generated/json/side_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case PageEntity:
				return pageEntityFromJson(data as PageEntity, json) as T;
			case SideTitleImage:
				return sideTitleImageFromJson(data as SideTitleImage, json) as T;
			case SideEntity:
				return sideEntityFromJson(data as SideEntity, json) as T;
			case SideBgImage:
				return sideBgImageFromJson(data as SideBgImage, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case PageEntity:
				return pageEntityToJson(data as PageEntity);
			case SideTitleImage:
				return sideTitleImageToJson(data as SideTitleImage);
			case SideEntity:
				return sideEntityToJson(data as SideEntity);
			case SideBgImage:
				return sideBgImageToJson(data as SideBgImage);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (PageEntity).toString()){
			return PageEntity().fromJson(json);
		}	else if(type == (SideTitleImage).toString()){
			return SideTitleImage().fromJson(json);
		}	else if(type == (SideEntity).toString()){
			return SideEntity().fromJson(json);
		}	else if(type == (SideBgImage).toString()){
			return SideBgImage().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<PageEntity>[] is M){
			return data.map<PageEntity>((e) => PageEntity().fromJson(e)).toList() as M;
		}	else if(<SideTitleImage>[] is M){
			return data.map<SideTitleImage>((e) => SideTitleImage().fromJson(e)).toList() as M;
		}	else if(<SideEntity>[] is M){
			return data.map<SideEntity>((e) => SideEntity().fromJson(e)).toList() as M;
		}	else if(<SideBgImage>[] is M){
			return data.map<SideBgImage>((e) => SideBgImage().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}